AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Cloud Formation Stack for Authenticating Requests to an S3 bucket

Parameters:
  Stage:
    Description: "The deployed environment"
    Default: dev
    Type: String
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: "You must specify dev or prod."

  Bucket:
    Description: "The name of the S3 bucket to serve files from"
    Type: String

Conditions:
  IsProductionEnv: !Equals [ !Ref Stage, prod ]

Resources:

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: !Join ["my-cloud-front-distribution", ["", "-", !Ref Stage] ]
        HttpVersion: http2
        Origins:
          - Id: !Ref S3Bucket
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref CloudFrontOriginAccessIdentity ] ]
        DefaultCacheBehavior:
          TargetOriginId: !Ref S3Bucket
          # Lambda@Edge configuration requires a function version not alias
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref LambdaEdge.Version
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
            Headers:
              - "Authorization"
          ViewerProtocolPolicy: allow-all

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !GetAtt S3Bucket.DomainName

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["", [!Ref Bucket, "-", !Ref Stage] ]
      VersioningConfiguration:
        Status: Enabled

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub '${S3Bucket.Arn}/*'
            Action: "s3:GetObject"


  LambdaEdge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/src.zip
      Role: !GetAtt LambdaEdgeRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      AutoPublishAlias: !Ref Stage
      Timeout: 5

  LambdaEdgeRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

Outputs:

  LambdaEdge:
    Description: Lambda@Edge ARN
    Value: !GetAtt LambdaEdge.Arn

  LambdaEdgeVersion:
    Description: Lambda@Edge ARN with Version
    Value: !Ref LambdaEdge.Version

  CloudFrontDistribution:
    Description: Cloudfront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
